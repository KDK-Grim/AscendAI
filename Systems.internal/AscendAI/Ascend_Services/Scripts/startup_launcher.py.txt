# /Ascend-AI/startup_launcher.py

import os
import time
import subprocess

PROMPT_DIR = "./prompts"
SCRIPT_DIR = "./scripts"
DASHBOARD_PATH = "./dashboard/launch_dashboard.py"
LOG_FILE = "./logs/startup_log.txt"

def log_event(message):
    with open(LOG_FILE, "a") as f:
        f.write(f"[{time.ctime()}] {message}\n")
    print(message)

def run_startup_sequence():
    log_event("Ascend-AI Startup Sequence Initiated.")

    # Step 1: Scan for all .txt files in /prompts
    for prompt_file in os.listdir(PROMPT_DIR):
        if prompt_file.endswith(".txt"):
            log_event(f"Reading Prompt: {prompt_file}")

    # Step 2: Scan for all .py files in /scripts
    for script_file in os.listdir(SCRIPT_DIR):
        if script_file.endswith(".py"):
            log_event(f"Indexing Script Module: {script_file}")

    # Step 3: Check for missing modules and regenerate using GPT-Engineer
    missing_files = [
        "preprocess.py", "model.py", "train.py", "evaluate.py",
        "inference_api.py", "watchdog.py", "tuner.py",
        "quantum_layer.py", "memory_engine.py", "financial_routing.py"
    ]

    for file in missing_files:
        file_path = os.path.join(SCRIPT_DIR, file)
        if not os.path.exists(file_path):
            log_event(f"[REGEN] Missing: {file}. Sending to GPT-Engineer for regeneration.")
            # GPT-Engineer will regenerate based on prompts + universal instruction
            # Placeholder for actual self-build integration
            time.sleep(1)

    # Step 4: Launch Unified Dashboard (iPhone + Surface)
    try:
        subprocess.Popen(["python3", DASHBOARD_PATH])
        log_event("‚úÖ Dashboard Successfully Launched.")
    except Exception as e:
        log_event(f"‚ùå Dashboard Launch Failed: {e}")

    # Step 5: Begin Full System Monitoring + Recursive Logic
    try:
        subprocess.Popen(["python3", "./core/ascend_boot.py"])
        log_event("üöÄ Ascend AI Core Booted and Online.")
    except Exception as e:
        log_event(f"‚ùå Ascend Core Boot Failure: {e}")

if __name__ == "__main__":
    run_startup_sequence()