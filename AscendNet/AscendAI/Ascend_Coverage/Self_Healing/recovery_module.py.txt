# /self_healing/recovery_module.py

import os
import shutil
import json
from datetime import datetime

CORE_BACKUPS = "./backups/"
TARGETS = {
    "core_log": "./memory/core_log.json",
    "constitution": "./memory/ascend_constitution.json",
    "log_script": "./scripts/log_ascension.py",
    "constitution_script": "./scripts/constitution_writer.py"
}

RECOVERY_LOG = "./logs/recovery_events.log"

def log_recovery(message):
    with open(RECOVERY_LOG, "a") as f:
        f.write(f"[{datetime.utcnow().isoformat()}] {message}\n")
    print(f"[RECOVERY] {message}")

def recover_file(label, destination):
    backup_file = os.path.join(CORE_BACKUPS, os.path.basename(destination))
    if os.path.exists(backup_file):
        shutil.copy(backup_file, destination)
        log_recovery(f"{label} restored from backup.")
    else:
        log_recovery(f"{label} has no backup â€” flagging for GPT-Engineer regeneration.")
        # Optionally trigger AI regeneration fallback here

def scan_and_recover():
    print("[RECOVERY] Scanning for corrupted or missing files...")
    for label, path in TARGETS.items():
        if not os.path.exists(path):
            recover_file(label, path)

if __name__ == "__main__":
    scan_and_recover()