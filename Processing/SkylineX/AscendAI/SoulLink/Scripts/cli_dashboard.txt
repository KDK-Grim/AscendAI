import os
import time
import psutil
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.live import Live
from datetime import datetime

console = Console()

def system_status():
    mem = psutil.virtual_memory()
    cpu = psutil.cpu_percent()
    uptime = datetime.now().strftime("%H:%M:%S")
    return {
        "CPU Usage": f"{cpu}%",
        "Memory Used": f"{mem.used // (1024 * 1024)} MB",
        "Memory Total": f"{mem.total // (1024 * 1024)} MB",
        "Uptime": uptime
    }

def generate_dashboard(model_registry):
    status = system_status()
    table = Table(title="Ascend-AI System Monitor", style="bold cyan")
    table.add_column("Metric", justify="right", style="bold")
    table.add_column("Value", style="green")

    for k, v in status.items():
        table.add_row(k, v)

    model_table = Table(title="Model Health", style="magenta")
    model_table.add_column("Model")
    model_table.add_column("Score")
    model_table.add_column("Quantum")
    model_table.add_column("Status")

    for name, model in model_registry.items():
        score = str(model.get("score", "N/A"))
        quantum = "Yes" if model.get("quantum") else "No"
        status = "Active" if model.get("call") else "Missing"
        model_table.add_row(name, score, quantum, status)

    return Panel.fit(table), Panel.fit(model_table)

def launch_dashboard(model_registry):
    with Live(console=console, refresh_per_second=1):
        while True:
            sys_panel, model_panel = generate_dashboard(model_registry)
            console.clear()
            console.print(sys_panel)
            console.print(model_panel)
            time.sleep(5)