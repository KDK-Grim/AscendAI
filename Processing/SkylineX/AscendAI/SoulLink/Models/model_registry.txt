import os
import importlib.util
import logging
import traceback

QUANTUM_LIBS = ["qiskit", "pennylane", "cirq", "braket"]
quantum_mode = any(__import__(lib, globals(), locals(), [], 0) for lib in QUANTUM_LIBS if __import__(lib, globals(), locals(), [], 0))

MODEL_REGISTRY = {}

def load_model_module(file_path):
    name = os.path.splitext(os.path.basename(file_path))[0]
    try:
        spec = importlib.util.spec_from_file_location(name, file_path)
        mod = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(mod)
        MODEL_REGISTRY[name] = {
            "call": getattr(mod, "call_model", None),
            "load": getattr(mod, "load_model", None),
            "validate": getattr(mod, "validate_model", None),
            "test": getattr(mod, "test_model", None),
            "module": mod,
            "score": 100,  # Initial trust score
            "quantum": hasattr(mod, "use_quantum") and mod.use_quantum
        }
        logging.info(f"Model {name} loaded successfully.")
    except Exception as e:
        logging.error(f"Failed to load model {name}: {e}")

def scan_models(folder):
    for file in os.listdir(folder):
        if file.endswith(".py") and not file.startswith("__"):
            load_model_module(os.path.join(folder, file))

def select_best_model(task="default"):
    valid_models = [name for name, m in MODEL_REGISTRY.items() if m["call"] and m["score"] > 60]
    sorted_models = sorted(valid_models, key=lambda x: MODEL_REGISTRY[x]["score"], reverse=True)
    return sorted_models[0] if sorted_models else None

def fusion_output(prompt, models):
    outputs = []
    for name in models:
        try:
            outputs.append(MODEL_REGISTRY[name]["call"](prompt))
        except:
            continue
    return "\n---\n".join(outputs)

def execute(prompt, model=None):
    if model and model in MODEL_REGISTRY:
        try:
            return MODEL_REGISTRY[model]["call"](prompt)
        except Exception as e:
            logging.warning(f"Primary model failed: {e}")

    fallback = select_best_model()
    if fallback:
        try:
            return MODEL_REGISTRY[fallback]["call"](prompt)
        except:
            pass

    # Final fallback: use ensemble
    top_models = list(MODEL_REGISTRY.keys())[:2]
    return fusion_output(prompt, top_models)