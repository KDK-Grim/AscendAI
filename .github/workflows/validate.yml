# File: .github/workflows/self_heal_and_lint.yml

name: GremlinGPT Autonomous Self-Healing & Lint

on:
  push:
    branches: [main, develop]
  pull_request:
  schedule:
    - cron: "0 * * * *"
    - cron: "30 2 * * *"
  workflow_dispatch:

jobs:
  validate-and-self-heal:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Zsh
        run: sudo apt-get update && sudo apt-get install -y zsh

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: 3.11
          auto-activate-base: false

      - name: Debug environment
        shell: zsh {0}
        run: |
          echo "Conda at: $CONDA"
          ls -la $CONDA/bin
          conda --version

      - name: Create Conda environments
        shell: zsh {0}
        run: |
          eval "$($CONDA/bin/conda shell.zsh hook)"
          cd GremlinGPT/conda_envs
          chmod +x create_envs.sh
          ./create_envs.sh

      - name: Install core dependencies
        shell: zsh {0}
        run: |
          eval "$($CONDA/bin/conda shell.zsh hook)"
          conda activate gremlin-nlp
          pip install flake8 black transformers sentence-transformers

      - name: Bootstrap NLP models
        shell: zsh {0}
        run: |
          eval "$($CONDA/bin/conda shell.zsh hook)"
          conda activate gremlin-nlp
          python -c "from transformers import AutoTokenizer, AutoModel; AutoTokenizer.from_pretrained('bert-base-uncased'); AutoModel.from_pretrained('bert-base-uncased')"
          python -c "from sentence_transformers import SentenceTransformer; SentenceTransformer('all-MiniLM-L6-v2')"

      - name: Inject flake8 config (for Black compatibility)
        shell: zsh {0}
        run: |
          cat <<EOF > setup.cfg
          [flake8]
          max-line-length = 120
          exclude =
              __pycache__,
              .git,
              .venv,
              build,
              dist,
              GremlinGPT/data/prompts,
              GremlinGPT/dev-experiment
          EOF

      - name: Run Black (auto-fix mode)
        shell: zsh {0}
        run: |
          eval "$($CONDA/bin/conda shell.zsh hook)"
          conda activate gremlin-nlp
          black GremlinGPT/ --line-length 120 --exclude GremlinGPT/dev-experiment

      - name: Commit style fixes
        if: github.event_name != 'pull_request'
        shell: zsh {0}
        run: |
          eval "$($CONDA/bin/conda shell.zsh hook)"
          conda activate gremlin-nlp
          git config user.email "ci@gremlingpt.ai"
          git config user.name "GremlinBot"
          git add .
          git commit -m "style: auto-fix Black lint issues" || echo "No changes"
          git push || echo "Push not needed or not permitted"

      - name: Lint codebase
        shell: zsh {0}
        run: |
          eval "$($CONDA/bin/conda shell.zsh hook)"
          conda activate gremlin-nlp
          flake8 GremlinGPT/ --exclude=GremlinGPT/dev-experiment

      - name: Targeted Lint (fail on critical issues only)
        shell: zsh {0}
        run: |
          eval "$($CONDA/bin/conda shell.zsh hook)"
          conda activate gremlin-nlp
          flake8 GremlinGPT/ --exclude=GremlinGPT/dev-experiment --count \
            --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run GremlinGPT
        shell: zsh {0}
        run: |
          eval "$($CONDA/bin/conda shell.zsh hook)"
          conda activate gremlin-nlp
          cd GremlinGPT/run
          chmod +x start_all.sh
          ./start_all.sh || echo "Run complete, warnings ignored"

      - name: Detect and auto-fix missing or broken scripts
        shell: zsh {0}
        continue-on-error: true
        run: |
          if [ ! -f GremlinGPT/run/start_all.sh ]; then
            echo "#!/bin/zsh\necho 'Stub: start_all.sh recreated by workflow. Please implement logic.'" > GremlinGPT/run/start_all.sh
            chmod +x GremlinGPT/run/start_all.sh
            echo "Recreated missing start_all.sh"
          fi

      - name: Self-report & notify on critical errors
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number || context.payload.pull_request?.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "ðŸš¨ Autonomous workflow detected a failure and attempted self-healing. Please review logs and fix any manual issues if needed."
            })
